#!/usr/bin/env python3

"""
Main entry point for starting a training job.
"""

import argparse
import logging
import os
import platform
import shutil
import subprocess
import sys

from training.logging_setup import setup_logging, setup_data_logger

parser = argparse.ArgumentParser(description="""
    Run agent training using proximal policy optimization.

    This will set up the data/log directories, optionally install any needed
    dependencies, start tensorboard, configure loggers, and start the actual
    training loop. If the data directory already exists, it will prompt for
    whether the existing data should be overwritten or appended. The latter
    allows for training to be restarted if interrupted.
    """)
parser.add_argument('data_dir',
    help="the directory in which to store this run's data")
parser.add_argument('--shutdown', action="store_true",
    help="Shut down the system when the job is complete"
    "(helpful for running remotely).")
parser.add_argument('--port', default=6006, type=int,
    help="Port on which to run tensorboard.")
parser.add_argument('--run-type', choices=('train', 'benchmark', 'inspect'),
    default='train',
    help="What to do once the algorithm and environments have been loaded. "
    "If 'train', train the model. If 'benchmark', run the model on testing "
    "environments. If 'inspect', load an ipython prompt for interactive "
    "debugging.")
parser.add_argument('-p', '--impact-penalty', type=float)
parser.add_argument('--penalty-baseline',
    choices=('starting-state', 'inaction'), default='starting-state')
parser.add_argument('-e', '--env-type', default='prune-still')
parser.add_argument('--curriculum', default="progress_estimate", type=str,
    help='Curriculum type ("uniform" or "progress_estimate")')
parser.add_argument('--algo', choices=('ppo', 'dqn', 'sac'), default='ppo')
parser.add_argument('--seed', default=None, type=int)
parser.add_argument('-s', '--steps', type=float, default=6e6,
    help='Length of training in steps (default: 6e6).')
parser.add_argument('-w', '--wandb', action='store_true',
    help='Use wandb for analytics.')
parser.add_argument('--ensure-gpu', action='store_true',
    help="Check that the machine we're running on has CUDA support")
args = parser.parse_args()


# Setup the directories

safety_dir = os.path.realpath(os.path.join(__file__, '../'))
data_dir = os.path.realpath(args.data_dir)
job_name = os.path.basename(data_dir)
sys.path.insert(1, safety_dir)  # ensure current directory is on the path
os.chdir(safety_dir)

if os.path.exists(data_dir) and args.data_dir is not None and args.run_type == 'train':
    print("The directory '%s' already exists. "
          "Would you like to overwrite the old data, append to it, or abort?" %
          data_dir)
    response = 'overwrite' if job_name.startswith('tmp') else None
    while response not in ('overwrite', 'append', 'abort'):
        response = input("(overwrite / append / abort) > ")
    if response == 'overwrite':
        print("Overwriting old data.")
        shutil.rmtree(data_dir)
    elif response == 'abort':
        print("Aborting.")
        exit()

os.makedirs(data_dir, exist_ok=True)
logger = setup_logging(data_dir, debug=(args.run_type == 'inspect'))


# Build the safelife C extensions.
# By making the build lib the same as the base folder, the extension
# should just get built into the source directory.
subprocess.run([
    "python3", os.path.join(safety_dir, "setup.py"),
    "build_ext", "--build-lib", safety_dir
])


# Start tensorboard

if args.port and not args.wandb:
    tb_proc = subprocess.Popen([
        "tensorboard", "--logdir_spec", job_name + ':' + data_dir, '--port', str(args.port)])
else:
    tb_proc = None


# Start training!

try:
    import numpy as np
    import torch
    from training.env_factory import build_environments
    from training import models
    from safelife.random import set_rng

    main_seed = np.random.SeedSequence(args.seed)
    logger.info("COMMAND ARGUMENTS: %s", ' '.join(sys.argv))
    logger.info("SETTING GLOBAL SEED: %i", main_seed.entropy)
    set_rng(np.random.default_rng(main_seed))
    torch.manual_seed(main_seed.entropy & (2**31 - 1))
    if args.seed is not None:
        # Note that this may slow down performance
        # See https://pytorch.org/docs/stable/notes/randomness.html#cudnn
        torch.backends.cudnn.deterministic = True

    logger.info("TRAINING RUN: %s", job_name)
    logger.info("ON HOST: %s", platform.node())
    if args.ensure_gpu:
        assert torch.cuda.is_available(), "CUDA support requested but not available!"

    data_logger = setup_data_logger(data_dir, args.run_type, args.wandb)

    if args.wandb:
        import wandb
        if wandb.login():
            run_notes = os.path.join(safety_dir, 'run-notes.txt')
            if os.path.exists(run_notes):
                run_notes = open(run_notes).read()
            else:
                run_notes = None

            wandb.init(reinit=True, name=job_name, config=args, notes=run_notes)

    training_envs, testing_envs = build_environments(args, main_seed, data_logger)
    obs_shape = training_envs[0].observation_space.shape

    algo_args = {
        'training_envs': training_envs,
        'testing_envs': testing_envs,
        'data_logger': data_logger,
    }

    if args.algo == 'ppo':
        from training.ppo import PPO as algo_cls
        algo_args['model'] = models.SafeLifeValuePolicyNetwork(obs_shape)
    elif args.algo == 'dqn':
        from training.dqn import DQN as algo_cls
        algo_args['training_model'] = models.SafeLifeQNetwork(obs_shape)
        algo_args['target_model'] = models.SafeLifeQNetwork(obs_shape)
    elif args.algo == 'sac':
        from training.sac import SAC as algo_cls
        algo_args['policy_network'] = models.SafeLifePolicyNetwork(obs_shape)
        algo_args['q_network'] = lambda: models.SafeLifeQNetwork(obs_shape)
    else:
        logging.error("Unexpected algorithm type '%s'", args.algo)
        raise ValueError("unexpected algorithm type")

    algo = algo_cls(**algo_args)

    if args.run_type == "train":
        algo.train(int(args.steps))
    elif args.run_type == "benchmark":
        algo.run_episodes(testing_envs, num_episodes=1000)
    elif args.run_type == "inspect":
        from IPython import embed
        print('')
        embed()


except Exception:
    logging.exception("Ran into an unexpected error. Aborting training.")
finally:
    if tb_proc is not None:
        tb_proc.kill()
    if args.wandb:
        wandb.join()
    if args.shutdown:
        # Shutdown in 3 minutes.
        # Enough time to recover if it crashed at the start.
        subprocess.run("sudo shutdown +3", shell=True)
        logging.critical("Shutdown commenced, but keeping ssh available...")
        subprocess.run("sudo rm -f /run/nologin", shell=True)
